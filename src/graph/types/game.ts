import { GQLBuild, GQLSchemaBuilder } from 'graph/builder'

import { findWhere, single } from 'db'
import {
  GameLevel,
  GameLevels,
  Games,
  GameSolution,
  GameSolutions,
  GameWorld,
  GameWorlds,
  playerByUser,
  Players,
} from 'db/models'
import { createService } from 'graph/base-service'

export const gameBuilder = (builder: GQLSchemaBuilder) => {
  const game = builder.model('Game').setInterface()
  const gameWorld = builder.model('GameWorld').setInterface()
  const gameLevel = builder.model('GameLevel').setInterface()
  const gameSolution = builder.model('GameSolution').setInterface()
  const player = builder.model('Player')
  player.attr('name', 'String!')
  builder.models.User.attr('player', 'Player!').resolve((user, args, context) => playerByUser(context))

  // connect the levels to the player
  builder.models.Player.attr('activeLevels', 'GameSolution')
    .isList()
    .resolve(async (player, args, context) => {
      // need to update the <Result> type of `find` and add {gameName: string}
      const solutions = await GameSolutions.find<GameSolution & { gameName: string }>(context, {
        where: query =>
          query
            .select('LevelSolutions.*', { gameName: 'Games.name' }) // adding {gameName: string} to the return value
            .where({ playerId: player.id })
            .join('Levels', 'Levels.id', '=', 'LevelSolutions.levelId')
            .join('Games', 'Games.id', '=', 'Levels.gameId'),
      })

      // removing the 'name' field again
      return solutions.map(({ gameName, ...solution }) => ({ ...solution, __typename: `${gameName}Solution` }))
    })

  game.attr('name', 'GamesList!') // will be generated by the build step
  game.attr('levels', '[GameLevel!]!')
  game.attr('worlds', '[GameWorld!]!')

  gameWorld.attr('name', 'String!')
  gameWorld.attr('game', 'Game!')
  gameWorld.attr('levels', '[GameLevel!]!')

  gameLevel.attr('name', 'String')
  gameLevel.attr('game', 'Game!')
  gameLevel.attr('world', 'GameWorld')
  gameLevel.attr('data', 'JSON!')

  gameSolution.attr('level', 'GameLevel!')
  gameSolution.attr('player', 'Player!')
  gameSolution.attr('data', 'JSON!')
  gameSolution.attr('state', 'LevelSolutionState!') // will be generated by the build step

  game.resolve(() => ({
    levels: (game: GameLevel, args, context) => findWhere(context, GameLevels, { gameId: game.id }),
    worlds: (game: GameLevel, args, context) => findWhere(context, GameWorlds, { gameId: game.id }),
  }))
  gameWorld.resolve(() => ({
    game: (world: GameWorld, args, context) => single(findWhere(context, Games, { id: world.gameId })),
    levels: (world: GameWorld, args, context) => findWhere(context, GameLevels, { worldId: world.id }),
  }))
  gameLevel.resolve(() => ({
    game: (level: GameLevel, args, context) => single(findWhere(context, Games, { id: level.gameId })),
    world: (level: GameLevel, args, context) => single(findWhere(context, GameWorlds, { id: level.worldId })),
  }))
  gameSolution.resolve(() => ({
    player: (solution: GameSolution, args, context) => single(findWhere(context, Players, { id: solution.playerId })),
    level: (solution: GameSolution, args, context) => single(findWhere(context, GameLevels, { id: solution.levelId })),
  }))
}

export const gameBuild = (build: GQLBuild) => {
  build.addType('GamesList', { values: ['FindPuzzle'] })
  build.addType('LevelSolutionState', { values: ['unchanged', 'active', 'won', 'lost'] })

  build.addQuery('getGame', 'Game', {
    args: {
      name: 'GamesList!',
    },
    resolver: async (_, { name }, context) => {
      const game = await single(
        Games.find(context, {
          where: query => query.where({ name }),
        }),
      )
      return !game
        ? null
        : {
            ...game,
            __typename: name,
            resolveType: name,
          }
    },
  })

  build.addMutation<never, { id: string }>('startLevel', 'GameSolution!', {
    args: {
      id: 'ID!',
    },
    resolver: async (_, { id }, context) => {
      const level = await single(GameLevels.find(context, { where: query => query.where({ id }) }))
      const game = await single(Games.find(context, { where: query => query.where({ id: level.gameId }) }))
      const player = await playerByUser(context)
      return {
        __typename: `${game.name}Solution`,
        ...(await single(
          GameSolutions.create(context, {
            data: {
              data: level.data,
              levelId: level.id,
              playerId: player.id,
            },
          }),
        )),
      }
    },
  })
}
